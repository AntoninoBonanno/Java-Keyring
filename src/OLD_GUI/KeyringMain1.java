package OLD_GUI;


import GUI.UpsertKey;
import GUI.UpsertPage;
import GUI.Credits;
import Exceptions.KeyringException;
import Classes.Folder;
import Keyring.KeyringClass;
import Classes.Page;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.ExpandVetoException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nino
 */
public class KeyringMain1 extends javax.swing.JFrame {
    
    /**
     * Creates new form KeyringMain
     * @param keyring
     */
    public KeyringMain1(KeyringClass keyring) {
        initComponents();
        this.keyring = keyring;
        jLabel_editDate.setText(keyring.getEditDateFile());
        
        javax.swing.JFrame me = this;
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                int result = JOptionPane.showConfirmDialog(me,
                "Sei sicuro di voler uscire?",
                "Conferma uscita", JOptionPane.YES_NO_CANCEL_OPTION);
                if(result != JOptionPane.YES_OPTION) return;
                System.out.println("\n<----- KEYRING ----->");
                dispose();
            }
        });
        loadFolders(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu_tablePassword = new javax.swing.JPopupMenu();
        jMenuItem_webSite = new javax.swing.JMenuItem();
        jMenuItem_email = new javax.swing.JMenuItem();
        jMenuItem_username = new javax.swing.JMenuItem();
        jMenuItem_password = new javax.swing.JMenuItem();
        jMenuItem_note = new javax.swing.JMenuItem();
        jPopupMenu_treeFolders = new javax.swing.JPopupMenu();
        jMenuItem_addFolder = new javax.swing.JMenuItem();
        jMenuItem_addPage = new javax.swing.JMenuItem();
        jMenuItem_edit = new javax.swing.JMenuItem();
        jMenuItem_delete = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_passwords = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton_add = new javax.swing.JButton();
        jButton_up = new javax.swing.JButton();
        jButton_remove = new javax.swing.JButton();
        jButton_down = new javax.swing.JButton();
        jButton_save = new javax.swing.JButton();
        jCheckBox_showPass = new javax.swing.JCheckBox();
        jTextField_trova = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton_edit = new javax.swing.JButton();
        jLabel_editDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree_folders = new javax.swing.JTree();
        jButton_addPage = new javax.swing.JButton();
        jButton_addFolder = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_editMasterKey = new javax.swing.JMenuItem();
        jMenuItem_exit = new javax.swing.JMenuItem();
        jMenu_credits = new javax.swing.JMenu();
        jMenuItem_credits = new javax.swing.JMenuItem();

        jPopupMenu_tablePassword.addPopupMenuListener(new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int rowAtPoint = jTable_passwords.rowAtPoint(SwingUtilities.convertPoint(jPopupMenu_tablePassword, new Point(0, 0), jTable_passwords));
                        if (rowAtPoint > -1) {
                            jTable_passwords.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                        }
                    }
                });
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }
        });

        jMenuItem_webSite.setText("Copia Sito web");
        jMenuItem_webSite.setToolTipText("");
        /*jMenuItem_webSite.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    keyring.copyToClipboard(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()), Keyring.KeyringClass.Key.ELEMENT_WEBSITE);
                } catch (KeyringException ex) {
                    JOptionPane.showMessageDialog(KeyringMain1.this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
                }
            }
        });*/
        jPopupMenu_tablePassword.add(jMenuItem_webSite);

        jMenuItem_email.setText("Copia Email");
        jMenuItem_email.setToolTipText("");
        /*jMenuItem_email.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    keyring.copyToClipboard(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()), Keyring.KeyringClass.Key.ELEMENT_EMAIL);
                } catch (KeyringException ex) {
                    JOptionPane.showMessageDialog(KeyringMain1.this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
                }
            }
        });*/
        jPopupMenu_tablePassword.add(jMenuItem_email);

        jMenuItem_username.setText("Copia Username");
        jMenuItem_username.setToolTipText("");
        /*jMenuItem_username.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    keyring.copyToClipboard(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()), Keyring.KeyringClass.Key.ELEMENT_USERNAME);
                } catch (KeyringException ex) {
                    JOptionPane.showMessageDialog(KeyringMain1.this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
                }
            }
        });*/
        jPopupMenu_tablePassword.add(jMenuItem_username);

        jMenuItem_password.setText("Copia Password");
        jMenuItem_password.setToolTipText("");
        /*jMenuItem_password.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    keyring.copyToClipboard(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()), Keyring.KeyringClass.Key.ELEMENT_PASSWORD);
                } catch (KeyringException ex) {
                    JOptionPane.showMessageDialog(KeyringMain1.this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
                }
            }
        });*/
        jPopupMenu_tablePassword.add(jMenuItem_password);

        jMenuItem_note.setText("Copia Note");
        jMenuItem_note.setToolTipText("");
        /*jMenuItem_note.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    keyring.copyToClipboard(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()), Keyring.KeyringClass.Key.ELEMENT_NOTE);
                } catch (KeyringException ex) {
                    JOptionPane.showMessageDialog(KeyringMain1.this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
                }
            }
        });*/
        jPopupMenu_tablePassword.add(jMenuItem_note);

        jPopupMenu_treeFolders.addPopupMenuListener(new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree_folders.getLastSelectedPathComponent();

                        jMenuItem_delete.setEnabled(node != null && !node.isRoot());
                        jMenuItem_edit.setEnabled(node != null);
                    }
                });
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }
        });

        jMenuItem_addFolder.setText("Aggiungi cartella");
        jMenuItem_addFolder.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createTreeNode(false);
            }
        });
        jPopupMenu_treeFolders.add(jMenuItem_addFolder);

        jMenuItem_addPage.setText("Aggiungi pagina");
        jMenuItem_addPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createTreeNode(true);
            }
        });
        jPopupMenu_treeFolders.add(jMenuItem_addPage);

        jMenuItem_edit.setText("Modifica");
        jMenuItem_edit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editTreeNode();
            }
        });
        jPopupMenu_treeFolders.add(jMenuItem_edit);

        jMenuItem_delete.setText("Elimina");
        jPopupMenu_treeFolders.add(jMenuItem_delete);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Keyring");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/logo1.png")));

        jTable_passwords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sito web", "Email", "Username", "Password", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_passwords.setComponentPopupMenu(jPopupMenu_tablePassword);
        jTable_passwords.setPreferredSize(new java.awt.Dimension(0, 0));
        jTable_passwords.setRowHeight(20);
        jTable_passwords.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            jButton_edit.setEnabled(jTable_passwords.getSelectedRow()>-1);
        });
        jScrollPane1.setViewportView(jTable_passwords);
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(jTable_passwords.getModel());
        jTable_passwords.setRowSorter(rowSorter);

        jTextField_trova.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jTextField_trova.getText();
                jTable_passwords.clearSelection();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                    jButton_up.setEnabled(true);
                    jButton_down.setEnabled(true);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    jButton_up.setEnabled(false);
                    jButton_down.setEnabled(false);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jTextField_trova.getText();
                jTable_passwords.clearSelection();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                    jButton_up.setEnabled(true);
                    jButton_down.setEnabled(true);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    jButton_up.setEnabled(false);
                    jButton_down.setEnabled(false);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo.png"))); // NOI18N

        jButton_add.setText("Aggiungi riga");
        jButton_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addActionPerformed(evt);
            }
        });

        jButton_up.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/su.png"))); // NOI18N
        jButton_up.setToolTipText("Sposta la riga selezionata in alto");
        jButton_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_upActionPerformed(evt);
            }
        });

        jButton_remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/rimuovi.png"))); // NOI18N
        jButton_remove.setToolTipText("Rimuovi la riga selezionata");
        jButton_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_removeActionPerformed(evt);
            }
        });

        jButton_down.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/giù.png"))); // NOI18N
        jButton_down.setToolTipText("Sposta la riga selezionata in basso");
        jButton_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_downActionPerformed(evt);
            }
        });

        jButton_save.setText("Salva");
        jButton_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_saveActionPerformed(evt);
            }
        });

        jCheckBox_showPass.setText("Mostra password");
        jCheckBox_showPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_showPassActionPerformed(evt);
            }
        });

        jTextField_trova.setToolTipText("Inserisci il testo da cercare");

        jLabel2.setText("Trova:");

        jButton_edit.setText("Modifica riga");
        jButton_edit.setEnabled(false);
        jButton_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_editActionPerformed(evt);
            }
        });

        jLabel_editDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_editDate.setText("File mai salvato.");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Root");
        jTree_folders.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree_folders.setComponentPopupMenu(jPopupMenu_treeFolders);
        jScrollPane2.setViewportView(jTree_folders);
        /* -- Start Custom Code */
        jTree_folders.addTreeWillExpandListener(new TreeWillExpandListener() {
            @Override
            public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) event.getPath().getLastPathComponent();

                if (node == null || node.isRoot() || node.isLeaf()) return;

                Folder folder = (Folder) node.getUserObject();
                int childCount = node.getChildCount();
                if(childCount == 1 || childCount < folder.size()) {
                    node.removeAllChildren();
                    addTreeNode(node, folder);
                }
            }

            @Override
            public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        jTree_folders.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                /*DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree_folders.getLastSelectedPathComponent();
                jButton_addFolder.setEnabled(!node.isLeaf());
                jButton_addPage.setEnabled(node != null);*/
            }
        });
        /* -- End Custom Code */

        jButton_addPage.setText("Aggiungi pagina");
        jButton_addPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addPageActionPerformed(evt);
            }
        });

        jButton_addFolder.setText("Aggiungi cartella");
        jButton_addFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addFolderActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem_editMasterKey.setText("Modifica master Key");
        jMenuItem_editMasterKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_editMasterKeyActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_editMasterKey);

        jMenuItem_exit.setText("Esci");
        jMenuItem_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_exitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_exit);

        jMenuBar1.add(jMenu1);

        jMenu_credits.setText("?");

        jMenuItem_credits.setText("Credits");
        jMenuItem_credits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_creditsActionPerformed(evt);
            }
        });
        jMenu_credits.add(jMenuItem_credits);

        jMenuBar1.add(jMenu_credits);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_addPage))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton_up, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton_down, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckBox_showPass)
                                        .addGap(88, 88, 88)
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton_edit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton_add)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton_save))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField_trova, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton_addFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel_editDate, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(jButton_up, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_down, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_trova, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBox_showPass)
                        .addComponent(jButton_addPage)
                        .addComponent(jButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_save)
                        .addComponent(jButton_add)
                        .addComponent(jButton_edit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_editDate)
                    .addComponent(jButton_addFolder))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_upActionPerformed
        if(jTable_passwords.getSelectedRows().length>1){
            JOptionPane.showMessageDialog(this, "Seleziona una riga singola.\n", "Attenzione", JOptionPane.INFORMATION_MESSAGE); 
            jTable_passwords.clearSelection(); 
            return;
        }            
        /*try {
            keyring.moveUpRow(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()));
            jTable_passwords.clearSelection();
            loadTable();
        } catch (KeyringException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
        }*/
    }//GEN-LAST:event_jButton_upActionPerformed

    private void jButton_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_removeActionPerformed
        if(jTable_passwords.getSelectedRows().length>1){
            JOptionPane.showMessageDialog(this, "Seleziona una riga singola.\n", "Attenzione", JOptionPane.INFORMATION_MESSAGE); 
            jTable_passwords.clearSelection(); 
            return;
        }
        /*try {
            keyring.removeRow(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()));
            jTable_passwords.clearSelection();
            loadTable();
        } catch (KeyringException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
        }*/
    }//GEN-LAST:event_jButton_removeActionPerformed

    private void jButton_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_downActionPerformed
        if(jTable_passwords.getSelectedRows().length>1){
            JOptionPane.showMessageDialog(this, "Seleziona una riga singola.\n", "Attenzione", JOptionPane.INFORMATION_MESSAGE); 
            jTable_passwords.clearSelection(); 
            return;
        }
        /*try {
            keyring.moveDownRow(jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()));
            jTable_passwords.clearSelection();
            loadTable();
        } catch (KeyringException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
        }*/
    }//GEN-LAST:event_jButton_downActionPerformed

    private void jButton_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addActionPerformed
       /* UpsertKey nr = new UpsertKey(this, true, keyring, -1);
        nr.setLocationRelativeTo(this);        
        nr.setVisible(true);*/
        
      //  loadTable();
    }//GEN-LAST:event_jButton_addActionPerformed

    private void jButton_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_saveActionPerformed
    try {
        jLabel_editDate.setText(keyring.save());
        JOptionPane.showMessageDialog(this, "Salvataggio eseguito con successo.\n", "Salvataggio", JOptionPane.INFORMATION_MESSAGE); 
    } catch (KeyringException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
        System.out.println("Errore: "+ ex.getMessage());
        System.out.println("Salvataggio file non riuscito.");
    }        
    }//GEN-LAST:event_jButton_saveActionPerformed

    private void jCheckBox_showPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_showPassActionPerformed
        System.out.println(jCheckBox_showPass.isSelected() ? "Mostro le password." : "Nascondo le password.");
       // loadTable();
    }//GEN-LAST:event_jCheckBox_showPassActionPerformed

    private void jButton_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_editActionPerformed
        if(jTable_passwords.getSelectedRows().length>1){
            JOptionPane.showMessageDialog(this, "Seleziona una riga singola.\n", "Attenzione", JOptionPane.INFORMATION_MESSAGE); 
            jTable_passwords.clearSelection(); 
            return;
        }
    /*    
        UpsertKey nr = new UpsertKey(this, true, keyring, jTable_passwords.convertRowIndexToModel(jTable_passwords.getSelectedRow()));
        nr.setLocationRelativeTo(this);        
        nr.setVisible(true);*/
                
        //loadTable();
    }//GEN-LAST:event_jButton_editActionPerformed

    private void jMenuItem_editMasterKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_editMasterKeyActionPerformed
        EditMasterKey e = new EditMasterKey(this, true, keyring);
        e.setLocationRelativeTo(this);
        e.setVisible(true);
        
        jLabel_editDate.setText(keyring.getEditDateFile());
    }//GEN-LAST:event_jMenuItem_editMasterKeyActionPerformed

    private void jMenuItem_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_exitActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jMenuItem_exitActionPerformed

    private void jMenuItem_creditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_creditsActionPerformed
        Credits c = new Credits(this, true);
        c.setLocationRelativeTo(this);
        c.setVisible(true);
    }//GEN-LAST:event_jMenuItem_creditsActionPerformed

    private void jButton_addPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addPageActionPerformed
        createTreeNode(true);
    }//GEN-LAST:event_jButton_addPageActionPerformed

    private void jButton_addFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addFolderActionPerformed
        createTreeNode(false);
    }//GEN-LAST:event_jButton_addFolderActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadFolders();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private final KeyringClass keyring;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_add;
    private javax.swing.JButton jButton_addFolder;
    private javax.swing.JButton jButton_addPage;
    private javax.swing.JButton jButton_down;
    private javax.swing.JButton jButton_edit;
    private javax.swing.JButton jButton_remove;
    private javax.swing.JButton jButton_save;
    private javax.swing.JButton jButton_up;
    private javax.swing.JCheckBox jCheckBox_showPass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel_editDate;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_addFolder;
    private javax.swing.JMenuItem jMenuItem_addPage;
    private javax.swing.JMenuItem jMenuItem_credits;
    private javax.swing.JMenuItem jMenuItem_delete;
    private javax.swing.JMenuItem jMenuItem_edit;
    private javax.swing.JMenuItem jMenuItem_editMasterKey;
    private javax.swing.JMenuItem jMenuItem_email;
    private javax.swing.JMenuItem jMenuItem_exit;
    private javax.swing.JMenuItem jMenuItem_note;
    private javax.swing.JMenuItem jMenuItem_password;
    private javax.swing.JMenuItem jMenuItem_username;
    private javax.swing.JMenuItem jMenuItem_webSite;
    private javax.swing.JMenu jMenu_credits;
    private javax.swing.JPopupMenu jPopupMenu_tablePassword;
    private javax.swing.JPopupMenu jPopupMenu_treeFolders;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_passwords;
    private javax.swing.JTextField jTextField_trova;
    private javax.swing.JTree jTree_folders;
    // End of variables declaration//GEN-END:variables
   
    /**
     * Vengono ricaricati i dati della tabella
     */   
    /*private void loadTable(){
        System.out.print("Carico la tabella...   ");   
        DefaultTableModel table = (DefaultTableModel) jTable_passwords.getModel();        
        table.setRowCount(0);
        
        keyring.getTableKeys().stream().map((r) -> {
            String pass = (jCheckBox_showPass.isSelected()) ? r.getPassword() : "********";
            Object[] row = {r.getWebSite(),r.getEmail(), r.getUsername(), pass, r.getNote()};
            return row;
        }).forEachOrdered((row) -> { 
            table.addRow(row);
        });
        System.out.println("Completato.");
    }     */

    private void loadFolders() {
        System.out.print("Carico i gruppi...   ");   
        
        DefaultTreeModel modelT = (DefaultTreeModel) jTree_folders.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) modelT.getRoot();
        rootNode.removeAllChildren();
            
        Folder rootFolder = keyring.getRootFolder();
        rootNode.setUserObject(rootFolder);
        addTreeNode(rootNode, rootFolder);
        modelT.reload();
        
        System.out.println("Completato.");
    }
    
     private void addTreeNode(DefaultMutableTreeNode parentNode, Folder folder){
        if(folder.hasSubfolders()){
            folder.getSubfolders().forEach((f) -> {
                DefaultMutableTreeNode a = new DefaultMutableTreeNode(f); 
                a.add(new DefaultMutableTreeNode());  //Vuoto così appare la cartella che si può espandere
                parentNode.add(a);
            });
        }
        folder.getPages().forEach((p) -> {
            DefaultMutableTreeNode a = new DefaultMutableTreeNode(p); 
            parentNode.add(a);
        });
    }
        
    private void reloadTreeNode(DefaultMutableTreeNode node){
        if (node == null || node.isLeaf()) return;
                
        Folder folder = (Folder) node.getUserObject();         
        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) (node.isRoot() ? node : node.getParent());
        
        parentNode.removeAllChildren();
        addTreeNode(parentNode, folder);   
        
        DefaultTreeModel modelT = (DefaultTreeModel) jTree_folders.getModel();
        modelT.reload();
        //jTree_folders.clearSelection();
    }
    
    private void createTreeNode(boolean page){
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree_folders.getLastSelectedPathComponent();
        
        if(node == null){
            DefaultTreeModel modelT = (DefaultTreeModel) jTree_folders.getModel();
            node = (DefaultMutableTreeNode) modelT.getRoot();
        }
        
        try {
            Folder f;
            if(node.isLeaf()){
               Page p = (Page)node.getUserObject();
               DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
               
               Folder parentF = (Folder) parentNode.getUserObject();
               f = parentF.convertPageToFolder(p);
               node.setUserObject(f);
               
               node = parentNode;
            }
            else {
                f = (Folder) node.getUserObject();
            }
            
            if(page){
                UpsertPage uP = new UpsertPage(this, true, f, null);
                uP.setLocationRelativeTo(this);        
                uP.setVisible(true);
            }
            else {      
              /*  UpsertFolder uF = new UpsertFolder(this, true, f, false);
                uF.setLocationRelativeTo(this);        
                uF.setVisible(true);*/
            }
            
            reloadTreeNode(node);
        } catch (KeyringException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
        }
    }
    
    private void editTreeNode(){
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree_folders.getLastSelectedPathComponent();
        
        if(node == null){
            DefaultTreeModel modelT = (DefaultTreeModel) jTree_folders.getModel();
            node = (DefaultMutableTreeNode) modelT.getRoot();
        }
        try {
            if(node.isLeaf()){
                DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
                Folder parentF = (Folder) parentNode.getUserObject();

                UpsertPage uP = new UpsertPage(this, true, parentF, (Page)node.getUserObject());
                uP.setLocationRelativeTo(this);        
                uP.setVisible(true);
                
                return;
            }
            
           /* UpsertFolder uF = new UpsertFolder(this, true, (Folder) node.getUserObject(), true);
            uF.setLocationRelativeTo(this);        
            uF.setVisible(true);*/
        
        } catch (KeyringException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),ex.getTitleMsg(),ex.getTypeMessage());
        }
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Components;

import Classes.Key;
import Classes.Page;
import Exceptions.KeyringException;
import GUI.Classes.ActionKeyListener;
import GUI.Classes.KeyTableModel;
import GUI.Classes.ColumnKeyEnum;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author AntoninoBonanno <https://github.com/AntoninoBonanno>
 */
public class JKeyTable extends JTable {

    /**
     * Creates new form JKeyTable
     */
    public JKeyTable() {
        initComponents();
    }
        
    public void loadTable(Page page){        
        System.out.print("Carico la tabella...   ");   
        this.page = page;
        KeyTableModel table = (KeyTableModel) getModel();        
        table.setKeys((page != null) ? page.getTableKeys() : null);
        
        System.out.println("Completato.");
    }
    
    public void showPassword(boolean showPassword){
        KeyTableModel table = (KeyTableModel) getModel();
        table.setShowPassword(showPassword);
    }
            
    public void filter(String text){
        clearSelection();
        if(page == null) return;
        
        TableRowSorter<KeyTableModel> rowSorter = (TableRowSorter<KeyTableModel>) getRowSorter();
        
        if(text.isEmpty()) rowSorter.setRowFilter(null);
        else rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
    }
    
    public void moveUpRow() throws KeyringException{
        getRowSorter().setSortKeys(null);
        
        var rowIndex = getSelectedRow();
        page.moveUpRow(rowIndex);
        KeyTableModel table = (KeyTableModel) getModel();
        table.reload();
    }
    
    public void moveDownRow() throws KeyringException{
        getRowSorter().setSortKeys(null);
        
        var rowIndex = getSelectedRow();
        page.moveDownRow(rowIndex);
        KeyTableModel table = (KeyTableModel) getModel();
        table.reload();
    }
    
    /**
     * Aggiunge un listener per l'evento <code>ActionKey</code>.
     * @param listener <code>ActionKeyListener</code> 
     */
    public void addKeyFolderListener(ActionKeyListener listener) {
        actionKeyListeners.add(listener);
    }
    
    public void fireAddKeyAction(){
        actionKeyListeners.forEach((akl) -> {
            akl.onAddKeyAction(page);
        });
        
        KeyTableModel table = (KeyTableModel) getModel();
        table.lastRowInserted();
    }
    
    public void fireEditKeyAction() {
        KeyTableModel table = (KeyTableModel) getModel();
        Key key = table.getKey(getSelectedRow()); 
        if(key == null) return;
        
        actionKeyListeners.forEach((akl) -> {
            akl.onEditKeyAction(key);
        });
        table.reload();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuKeyTable = new javax.swing.JPopupMenu();
        jMenuCopy = new javax.swing.JMenu();
        jMenuItemWebSite = new javax.swing.JMenuItem();
        jMenuItemEmail = new javax.swing.JMenuItem();
        jMenuItemUsername = new javax.swing.JMenuItem();
        jMenuItemPassword = new javax.swing.JMenuItem();
        jMenuItemNote = new javax.swing.JMenuItem();
        jMenuItemEditKey = new javax.swing.JMenuItem();
        jMenuItemDeleteKey = new javax.swing.JMenuItem();

        jPopupMenuKeyTable.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenuKeyTablePopupMenuWillBecomeVisible(evt);
            }
        });

        jMenuCopy.setText("Copia");

        jMenuItemWebSite.setText("Sito web");
        jMenuItemWebSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWebSiteActionPerformed(evt);
            }
        });
        jMenuCopy.add(jMenuItemWebSite);

        jMenuItemEmail.setText("Email");
        jMenuItemEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEmailActionPerformed(evt);
            }
        });
        jMenuCopy.add(jMenuItemEmail);

        jMenuItemUsername.setText("Username");
        jMenuItemUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUsernameActionPerformed(evt);
            }
        });
        jMenuCopy.add(jMenuItemUsername);

        jMenuItemPassword.setText("Password");
        jMenuItemPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasswordActionPerformed(evt);
            }
        });
        jMenuCopy.add(jMenuItemPassword);

        jMenuItemNote.setText("Note");
        jMenuItemNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNoteActionPerformed(evt);
            }
        });
        jMenuCopy.add(jMenuItemNote);

        jPopupMenuKeyTable.add(jMenuCopy);

        jMenuItemEditKey.setText("Modifica");
        jMenuItemEditKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditKeyActionPerformed(evt);
            }
        });
        jPopupMenuKeyTable.add(jMenuItemEditKey);

        jMenuItemDeleteKey.setText("Elimina");
        jMenuItemDeleteKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteKeyActionPerformed(evt);
            }
        });
        jPopupMenuKeyTable.add(jMenuItemDeleteKey);

        setModel(new KeyTableModel());
        setComponentPopupMenu(jPopupMenuKeyTable);
        setDragEnabled(true);
        setRowSorter(new TableRowSorter<>(getModel()));
        setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemEditKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditKeyActionPerformed
        fireEditKeyAction();
    }//GEN-LAST:event_jMenuItemEditKeyActionPerformed

    private void jPopupMenuKeyTablePopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenuKeyTablePopupMenuWillBecomeVisible
        JKeyTable self = this;
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                int rowAtPoint = rowAtPoint(SwingUtilities.convertPoint(jPopupMenuKeyTable, new Point(0, 0), self));
                System.out.println(rowAtPoint);
                if (rowAtPoint > -1) {
                    setRowSelectionInterval(rowAtPoint, rowAtPoint);
                }
            }
        });        
    }//GEN-LAST:event_jPopupMenuKeyTablePopupMenuWillBecomeVisible

    private void jMenuItemWebSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWebSiteActionPerformed
        try {
            copySelectedKey(ColumnKeyEnum.WEB_SITE);
        } catch (KeyringException ex) {
            Logger.getLogger(JKeyTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemWebSiteActionPerformed

    private void jMenuItemEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEmailActionPerformed
        try {
            copySelectedKey(ColumnKeyEnum.EMAIL);
        } catch (KeyringException ex) {
            Logger.getLogger(JKeyTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemEmailActionPerformed

    private void jMenuItemUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUsernameActionPerformed
        try {
            copySelectedKey(ColumnKeyEnum.USERNAME);
        } catch (KeyringException ex) {
            Logger.getLogger(JKeyTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemUsernameActionPerformed

    private void jMenuItemPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasswordActionPerformed
        try {
            copySelectedKey(ColumnKeyEnum.PASSWORD);
        } catch (KeyringException ex) {
            Logger.getLogger(JKeyTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemPasswordActionPerformed

    private void jMenuItemNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNoteActionPerformed
        try {
            copySelectedKey(ColumnKeyEnum.NOTE);
        } catch (KeyringException ex) {
            Logger.getLogger(JKeyTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemNoteActionPerformed

    private void jMenuItemDeleteKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteKeyActionPerformed
        try {
            var rowIndex = getSelectedRow();
            if(rowIndex < 0) throw new KeyringException("Seleziona una riga", KeyringException.INFORMATION_MESSAGE);
            
            int result = JOptionPane.showConfirmDialog(this, "Sei sicuro di voler eliminare la password?",
                "Conferma eliminazione", JOptionPane.YES_NO_CANCEL_OPTION);
            if(result != JOptionPane.YES_OPTION) return;
        
            KeyTableModel table = (KeyTableModel) getModel();            
            page.removeKey(table.getKey(rowIndex));
        } catch (KeyringException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), ex.getTitle(), ex.getMessageType());
        }
    }//GEN-LAST:event_jMenuItemDeleteKeyActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2) {
            fireEditKeyAction();
        }
    }//GEN-LAST:event_formMouseClicked

    
    private Page page;    
    private final List<ActionKeyListener> actionKeyListeners = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenuCopy;
    private javax.swing.JMenuItem jMenuItemDeleteKey;
    private javax.swing.JMenuItem jMenuItemEditKey;
    private javax.swing.JMenuItem jMenuItemEmail;
    private javax.swing.JMenuItem jMenuItemNote;
    private javax.swing.JMenuItem jMenuItemPassword;
    private javax.swing.JMenuItem jMenuItemUsername;
    private javax.swing.JMenuItem jMenuItemWebSite;
    private javax.swing.JPopupMenu jPopupMenuKeyTable;
    // End of variables declaration//GEN-END:variables

   private void copySelectedKey(ColumnKeyEnum keyEnum) throws KeyringException {
        var rowIndex = getSelectedRow();
        if(rowIndex < 0) throw new KeyringException("Seleziona una riga", KeyringException.INFORMATION_MESSAGE);
        
        KeyTableModel table = (KeyTableModel) getModel();
        
        boolean showPassword = table.isShowPassword();
        table.setShowPassword(true);
        
        String cell = table.getValueAt(rowIndex, keyEnum); 
        table.setShowPassword(showPassword);
        if(cell == null) throw new KeyringException("Si è verificato un errore durante la selezione", "Errore", KeyringException.ERROR_MESSAGE);
        
        StringSelection stringSelection = new StringSelection(cell);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }
}

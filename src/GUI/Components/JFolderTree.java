/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Components;

import Classes.Folder;
import Classes.KeyringObject;
import Classes.Page;
import GUI.Classes.ActionFolderListener;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
/**
 *
 * @author Nino
 */
public class JFolderTree extends JTree {

    /**
     * Creates new form JFolderTreeForm
     */
    public JFolderTree() {
        initComponents();
        
    }

    @Override
    public DefaultTreeModel getModel(){
        return (DefaultTreeModel) super.getModel();
    }
       
    public void setRootFolder(Folder rootFolder){
        System.out.print("Carico la root folder...   ");   
        
        DefaultMutableTreeNode rootNode = getRootNode();        
        loadFolder(rootNode, rootFolder);
                
        System.out.println("Completato.");
    }
    
    /**
     * Aggiunge un listener per l'evento <code>ActionFolder</code>.
     * @param listener <code>ActionFolderListener</code> 
     */
    public void addActionFolderListener(ActionFolderListener listener) {
        actionFolderListeners.add(listener);
    }
        
    public Page getSelectedPage(){
        KeyringObject selectedElement = getSelectedElement();
        return (selectedElement instanceof Page) ? ((Page) selectedElement) : null;
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuFolderTree = new javax.swing.JPopupMenu();
        jMenuItemAddPage = new javax.swing.JMenuItem();
        jMenuItemAddFolder = new javax.swing.JMenuItem();
        jMenuItemEdit = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();

        jMenuItemAddPage.setText("Pagina");
        jMenuItemAddPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddPageActionPerformed(evt);
            }
        });
        jPopupMenuFolderTree.add(jMenuItemAddPage);

        jMenuItemAddFolder.setText("Cartella");
        jMenuItemAddFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddFolderActionPerformed(evt);
            }
        });
        jPopupMenuFolderTree.add(jMenuItemAddFolder);

        jMenuItemEdit.setText("Modifica");
        jMenuItemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditActionPerformed(evt);
            }
        });
        jPopupMenuFolderTree.add(jMenuItemEdit);

        jMenuItemDelete.setText("Elimina");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        jPopupMenuFolderTree.add(jMenuItemDelete);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Root");
        setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        setComponentPopupMenu(jPopupMenuFolderTree);
        addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                formValueChanged(evt);
            }
        });
        addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                formTreeWillExpand(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_formTreeWillExpand
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();

        if (node == null || node.isRoot() || node.isLeaf()) return;
        
        Folder folder = (Folder) node.getUserObject(); 
        int childCount = node.getChildCount();
        if(childCount == 1 || childCount < folder.size()) {
            node.removeAllChildren();                 
            loadFolder(node, folder);
        }
    }//GEN-LAST:event_formTreeWillExpand

    private void jMenuItemAddFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddFolderActionPerformed
        KeyringObject selected = getSelectedElement();
        Folder parent = getSelectedParentElement();
        
        actionFolderListeners.forEach((afl) -> {
            afl.addFolderAction(parent, selected);
        });
        reloadSelectedElement();
    }//GEN-LAST:event_jMenuItemAddFolderActionPerformed

    private void jMenuItemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditActionPerformed
        KeyringObject selected = getSelectedElement();
        if(selected instanceof Folder){
            actionFolderListeners.forEach((afl) -> {
                afl.editFolderAction((Folder) selected);
            });
        } else {
            actionFolderListeners.forEach((afl) -> {
                afl.editPageAction((Page) selected);
            }); 
        }        
        reloadSelectedElement();
    }//GEN-LAST:event_jMenuItemEditActionPerformed

    private void jMenuItemAddPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddPageActionPerformed
        KeyringObject selected = getSelectedElement();
        Folder parent = getSelectedParentElement();
        
        actionFolderListeners.forEach((afl) -> {
            afl.addPageAction(parent, selected);
        });
        reloadSelectedElement();
    }//GEN-LAST:event_jMenuItemAddPageActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        KeyringObject selected = getSelectedElement();
        Folder parent = getSelectedParentElement();
        if(parent == null) return;
        
        if(selected instanceof Folder){
            actionFolderListeners.forEach((afl) -> {
                afl.deleteFolderAction(parent, (Folder) selected);
            });
        } else {
            actionFolderListeners.forEach((afl) -> {
                afl.deletePageAction(parent, (Page) selected);
            }); 
        }        
        reloadSelectedElement();
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void formValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_formValueChanged
        DefaultMutableTreeNode selectedNode = getSelectedNode();
        jMenuItemDelete.setEnabled(!selectedNode.isRoot());
    }//GEN-LAST:event_formValueChanged


    private final List<ActionFolderListener> actionFolderListeners = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItemAddFolder;
    private javax.swing.JMenuItem jMenuItemAddPage;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemEdit;
    private javax.swing.JPopupMenu jPopupMenuFolderTree;
    // End of variables declaration//GEN-END:variables
    
    private void loadFolder(DefaultMutableTreeNode node, Folder folder){
        node.removeAllChildren();
        node.setUserObject(folder);
        
        if(folder.hasSubfolders()){
            folder.getSubfolders().forEach((subfolder) -> {
                DefaultMutableTreeNode subnode = new DefaultMutableTreeNode(subfolder); 
                subnode.add(new DefaultMutableTreeNode());  //Vuoto così appare la cartella che si può espandere
                node.add(subnode);
            });
        }
        folder.getPages().forEach((page) -> {
            DefaultMutableTreeNode subnode = new DefaultMutableTreeNode(page); 
            node.add(subnode);
        });
        
        getModel().reload();
    }
    
    private DefaultMutableTreeNode getRootNode(){
        return (DefaultMutableTreeNode) getModel().getRoot();
    }
         
    private DefaultMutableTreeNode getSelectedNode(){
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) getLastSelectedPathComponent();
        return (node == null) ? getRootNode() : node;
    }
    
    private KeyringObject getSelectedElement(){
        DefaultMutableTreeNode node = getSelectedNode();
        return (KeyringObject) node.getUserObject();
    }
    
    private DefaultMutableTreeNode getSelectedParentNode(){
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) getSelectedNode();
        return (DefaultMutableTreeNode) node.getParent();
    }
    
    private Folder getSelectedParentElement(){
        DefaultMutableTreeNode node = getSelectedParentNode();
        return (node == null) ? null : (Folder) node.getUserObject();
    }
    
    private void reloadSelectedElement(){
        DefaultMutableTreeNode node = getSelectedParentNode();
        if(node != null) loadFolder(node, getSelectedParentElement());
        else loadFolder(getSelectedNode(), (Folder) getSelectedElement());
    }
}
